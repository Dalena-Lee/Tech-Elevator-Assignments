What is a call stack?|A call stack keeps track of how many times a method is called.|A call stack keeps track of how many times a class is called.|A call stack keeps track of how many times an exception occurs.|A call stack keeps track of each method that is called.*
What is a stack trace?|A stack trace shows how many times a method call fails and the exception type.|A stack trace shows the exception type and the call stack.*|A stack trace shows how many times an exception occurs.|A stack trace shows each exception thrown and its path.
What is an exception?|An event that occurs only during runtime, can be caught and handle, and is only caused by data.|An event that exits the program, can be caught but cannot be handled, and occurs only during compiling.|An event that is possible to recover from, can be caught and handle, occurs at compile or runtime, and is caused by code or data*.|An event that indicates errors that can be caught and handled, is possible to recover from, and associated with the runtime environment.
What is an error?|An event that exits the program, can be caught but cannot be handled, and occurs during compiling.|An event that can be caught but cannot be handled, is possible to recover from, and is caused by the running environment.|An event that is impossible to recover from, should not be handled, occurs at compiling, and is caused by code or data.|An event that is impossible to recover from, should not be handled, occurs at runtime, and is caused by the running environment*.
What is the "throws" keyword?|The "throws" keyword means your code could produce an exception*.|The "throws" keyword identifies a block of code that can produce an exception.|The "throws" keyword means your code could produce an exception and prevents your program from terminating.|The "throws" keyword means your program could potentially terminate when an exception occurs.
